name: Test Suite

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]

env:
  CARGO_TERM_COLOR: always

jobs:
  test:
    name: Test on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        rust: [stable, 1.78.0]
        exclude:
          # Skip Windows with older Rust version to reduce CI time
          - os: windows-latest
            rust: 1.78.0

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@stable
      with:
        toolchain: ${{ matrix.rust }}

    - name: Cache dependencies
      uses: actions/cache@v3
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
        key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
        restore-keys: |
          ${{ runner.os }}-cargo-

    - name: Install dependencies (Ubuntu)
      if: matrix.os == 'ubuntu-latest'
      run: |
        sudo apt-get update
        sudo apt-get install -y wl-clipboard xclip

    - name: Install dependencies (macOS)
      if: matrix.os == 'macos-latest'
      run: |
        # macOS has pbcopy/pbpaste built-in, no additional installation needed
        echo "macOS clipboard tools are built-in"

    - name: Install dependencies (Windows)
      if: matrix.os == 'windows-latest'
      run: |
        # Windows clipboard is handled by arboard crate
        echo "Windows clipboard is handled by arboard"

    - name: Make test script executable
      run: chmod +x run-tests.sh

    - name: Run test suite
      run: ./run-tests.sh

    - name: Check if tests passed
      shell: bash
      run: |
        if [ $? -eq 0 ]; then
          echo "✅ All tests passed successfully!"
        else
          echo "❌ Some tests failed!"
          exit 1
        fi

  # Additional job to test the CLI help and version
  cli-basics:
    name: CLI Basics
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@stable

    - name: Build the application
      run: cargo build --release

    - name: Test help output
      run: |
        ./target/release/cxt --help
        ./target/release/cxt --version

    - name: Test CI mode
      run: |
        ./target/release/cxt --ci --help
        ./target/release/cxt --ci --version

  # Job to ensure the application builds successfully
  build:
    name: Build
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@stable

    - name: Build debug version
      run: cargo build

    - name: Build release version
      run: cargo build --release

    - name: Check for warnings
      run: cargo check --all-targets --all-features

    - name: Run clippy
      run: cargo clippy --all-targets --all-features -- -D warnings 
